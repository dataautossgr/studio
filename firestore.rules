/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset is in prototyping mode, which prioritizes developer velocity and rapid iteration.
 *   All collections are publicly readable. Writes are disabled to prevent accidental data corruption.
 *   This posture is temporary and suitable ONLY for isolated development environments.
 *   A production ruleset must implement strict authorization and input validation.
 * @data-structure The database consists of several top-level collections: `products`, `sales`, `sale_items`,
 *   `dealers`, `purchases`, `customers`, `cash_sessions`, `bank_transactions`, and `settings`.
 *   Each collection contains documents representing the corresponding entity.
 * @key-security-decisions All write operations are disabled to ensure data integrity during prototyping.
 *   List operations are enabled to diagnose the source of the reported error.
 *   Data validation is disabled to allow flexible schema changes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read products. Writes are disallowed.
     * @path /products/{productId}
     * @allow (get, list) Any unauthenticated user can read a product.
     * @deny (create, update, delete) No one can create, update, or delete a product.
     * @principle Public read, no writes during prototype.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read sales. Writes are disallowed.
     * @path /sales/{saleId}
     * @allow (get, list) Any unauthenticated user can read a sale.
     * @deny (create, update, delete) No one can create, update, or delete a sale.
     * @principle Public read, no writes during prototype.
     */
    match /sales/{saleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read sale items. Writes are disallowed.
     * @path /sale_items/{saleItemId}
     * @allow (get, list) Any unauthenticated user can read a sale item.
     * @deny (create, update, delete) No one can create, update, or delete a sale item.
     * @principle Public read, no writes during prototype.
     */
    match /sale_items/{saleItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read dealers. Writes are disallowed.
     * @path /dealers/{dealerId}
     * @allow (get, list) Any unauthenticated user can read a dealer.
     * @deny (create, update, delete) No one can create, update, or delete a dealer.
     * @principle Public read, no writes during prototype.
     */
    match /dealers/{dealerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read purchases. Writes are disallowed.
     * @path /purchases/{purchaseId}
     * @allow (get, list) Any unauthenticated user can read a purchase.
     * @deny (create, update, delete) No one can create, update, or delete a purchase.
     * @principle Public read, no writes during prototype.
     */
    match /purchases/{purchaseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read customers. Writes are disallowed.
     * @path /customers/{customerId}
     * @allow (get, list) Any unauthenticated user can read a customer.
     * @deny (create, update, delete) No one can create, update, or delete a customer.
     * @principle Public read, no writes during prototype.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read cash sessions. Writes are disallowed.
     * @path /cash_sessions/{cashSessionId}
     * @allow (get, list) Any unauthenticated user can read a cash session.
     * @deny (create, update, delete) No one can create, update, or delete a cash session.
     * @principle Public read, no writes during prototype.
     */
    match /cash_sessions/{cashSessionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read bank transactions. Writes are disallowed.
     * @path /bank_transactions/{bankTransactionId}
     * @allow (get, list) Any unauthenticated user can read a bank transaction.
     * @deny (create, update, delete) No one can create, update, or delete a bank transaction.
     * @principle Public read, no writes during prototype.
     */
    match /bank_transactions/{bankTransactionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read settings. Writes are disallowed.
     * @path /settings/{settingId}
     * @allow (get, list) Any unauthenticated user can read a setting.
     * @deny (create, update, delete) No one can create, update, or delete a setting.
     * @principle Public read, no writes during prototype.
     */
    match /settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}