/**
 * @fileoverview Firestore Security Rules for the automotive inventory application.
 *
 * Core Philosophy:
 * This ruleset is generated in "prototyping mode", which prioritizes rapid development and iteration
 * speed over strict data validation. All data is treated as public. Authentication is required for all operations.
 * While authentication is required, all authenticated users are treated equally; there are no roles or permissions.
 *
 * Data Structure:
 * The database consists of several top-level collections: `products`, `sales`, `sale_items`, `dealers`,
 * `purchases`, `customers`, `cash_sessions`, `bank_transactions`, and `settings`.
 * Each collection stores data related to its respective entity.
 *
 * Key Security Decisions:
 * - All collections are publicly readable.
 * - All authenticated users can create, update, and delete documents in all collections.
 * - No data validation is performed.
 * - List operations are allowed for all users on all collections.
 *
 * Denormalization for Authorization:
 * - Not used in this prototyping mode.
 *
 * Structural Segregation:
 * - Not used in this prototyping mode.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read, create, update, and delete product documents.
     * @path /products/{productId}
     * @allow (get, list): Any authenticated user can read product data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete product data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to product data.
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete sale documents.
     * @path /sales/{saleId}
     * @allow (get, list): Any authenticated user can read sale data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete sale data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to sale data.
     */
    match /sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete sale item documents.
     * @path /sale_items/{saleItemId}
     * @allow (get, list): Any authenticated user can read sale item data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete sale item data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to sale item data.
     */
    match /sale_items/{saleItemId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete dealer documents.
     * @path /dealers/{dealerId}
     * @allow (get, list): Any authenticated user can read dealer data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete dealer data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to dealer data.
     */
    match /dealers/{dealerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete purchase documents.
     * @path /purchases/{purchaseId}
     * @allow (get, list): Any authenticated user can read purchase data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete purchase data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to purchase data.
     */
    match /purchases/{purchaseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete customer documents.
     * @path /customers/{customerId}
     * @allow (get, list): Any authenticated user can read customer data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete customer data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to customer data.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete cash session documents.
     * @path /cash_sessions/{cashSessionId}
     * @allow (get, list): Any authenticated user can read cash session data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete cash session data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to cash session data.
     */
    match /cash_sessions/{cashSessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete bank transaction documents.
     * @path /bank_transactions/{bankTransactionId}
     * @allow (get, list): Any authenticated user can read bank transaction data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete bank transaction data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to bank transaction data.
     */
    match /bank_transactions/{bankTransactionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read, create, update, and delete setting documents.
     * @path /settings/{settingId}
     * @allow (get, list): Any authenticated user can read setting data.
     * @allow (create, update, delete): Any authenticated user can create, update, or delete setting data.
     * @deny (create, update, delete): No scenario is explicitly denied as all authenticated users are allowed.
     * @principle Allows public read access and authenticated write access to setting data.
     */
    match /settings/{settingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }
  }
}